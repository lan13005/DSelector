# this is the config file that the fit scripts will look towards which is loaded by loadCfg.py for the python files and a grep command for the sh files

# IT WILL ALSO BE THE README
# countEventsInBins.C is used to get the events in each mass bin so we can see if there is a deficit which might hinder PWA
# fit_etapi_moments.cfg is copied by divideData.pl to all the bins
# fullFit.py with args: iProcess binsPerProc processSpawned will run a single process starting on bin=iProcess and then stepping by processSpawned with binsPerProc iterations. So 0 3 20 would run on bins 0, 20, 60
#	The reason we do this striding of bins is because the nearby bins should be similar in size, we want to homegenize. This program takes the amplitude ranges defined in this cfg file and samples from them. 
# fullFit_spawn.sh runs fullFit.py on all the bins. 
# bootFit.py and bootFit_spawn.sh does basically the same thing as the fullFit versions of them but this time it selects various random numbers as a seed for the bootstrapping. The intial amplitudes are based off of the converged
# 	amplitudes from the fullFit program. It allows a percent deviation from these converged values and a base shift. These values should probably be chosen such that the amplitudes are allowed to vary abit such that we aren't kind of #       enforcing some kind of similarity but also not allowing them to change too much as to hit a new minimum. Not sure if this makes sense....
# checkUniqueSeedsAllConverged.py is used to check if  bootFit_spawn.sh did the right thing and initialized the seeds properly for all the bins
# grabFull.py and grabBoot.py will look inside fitDir and grab all the amplitudes into individual files, one for each seed. 
# 	must use moveSeedSensi.sh first to move all the seed files to proper location. We can actually remove the need for moveSeedSensi.sh to save time but it cleans things up sort of 
# plotAmps.py can now run through all these files and plot the amplitudes using pyroot
# ------------------------- TYPICAL USUAGE ----------------------------
# DATA SETUP - we must first the data. DSelector_thrown outputs the data into 3 files with varying t. We still have to pass this through split_gen.C using run_split_thrown.sh.
#	     - WE MUST USE THE FLAT TREES FOR THE RECO AND DATA. HAVE TO CHANGE THE NAMES OF THE FLAT ROOT FILE IN THE DSELECTOR!!! THEN WE PASS IT THROUGH run_split.sh to get it correct form
# 	        1. root -l -b -q runDSelectorThrown_7_17_14.C
#		2. mv thrownNotAmptoolsReady_pi0eta_* amptools/newAnalysis
#		3. CHANGE NAME OF degAngle in DSelector_ver20.C to data_
#		4. root -l -b -q runDSelector_7_17_14.C
#		5. mv data_treeFlat_DSelector_pi0eta.root amptools/newAnalysis
#		6. CHANGE NAME OF degAngle in DSelector_ver20.C to reco_
#		7. root -l -b -q runDSelector_7_17_14.C
#		8. mv reco_treeFlat_DSelector_pi0eta.root amptools/newAnalysis
#		9. cd amptools/newAnalysis
#		10. ./run_split.sh after changing appropriate names in split_selected_in_t.C/h
#		11. ./run_split_thrown.sh after changing appropriate names in split_gen.C/h
# 1. ./divideData.pl
# 2. ./fullFit_spawn.sh
# 3. ./bootFit_spawn.sh
# 4. python grabFull.py
# 5. ./moveSeedSensi.sh
# 6. python checkUniqueSeedsAllConverged.py
# 7. python grabBoot.py 
# 8. python plotAmps.py
# 9. project_moments divideRoot NONE -full moments.root
#   MIGHT NEED TO USE: /d/home/ln16/gluex_top/halld_sim_3.1.1/Linux_CentOS7-x86_64-gcc4.8.5/bin/project_moments divideRoot NONE -full moments.root
# ---------------------------------------------------------------------



# MASS VARAIBLES WILL NOT BE DEFINIED HERE SINCE THE ONLY PLACE WE USE IT IS IN THE divideData.pl SCRIPT. PL SUCKS 

# GLOBAL VARIABLES USED FOR BOTH FULL AND BOOT DATA 
LOW_MASS=0.7
UPP_MASS=2.0
NUMBER_BINS=65
MAX_ITER=100
PROCESSES_TO_SPAWN=5
# choosing the seedNumber that will randomly sample from the region defined for the amplitudes real and imag parts
SEED_AMP_INIT=673911
# fit_dir should match the location from divideData.pl
FIT_DIR='EtaPi_fit' 
SEED_FILE='param_init.cfg'
SAVE_AMPS='pi0eta_amps'

# VARIABLES JUST FOR THE FULL FIT
# AMP_NAMES has to follow the same order as in the amplitudes cfg file.
# These defined ranges will be used to initialize the amplitudes for the full fit. Sampled uniformly.
# ----AMP_NAMES=["S0-","D0-"]AMP_NAMES=["S0-","P0-","P1-","D0-","D1-","P1+","D1+"]
AMP_NAMES=["S0-","P0-","P1-","D0-","D1-","P1+","D1+"]
MOM_NAMES=["H00","H10","H11","H20","H21","H22","H30","H31","H32","H40","H41","H42"]
PROJ_MOM_NAMES=["hMoment00", "hMoment10","hMoment11","hMoment20","hMoment21","hMoment22","hMoment30","hMoment31","hMoment32","hMoment40","hMoment41", "hMoment42"]
REAL_LOW=[100 , 10 ,  -10  , 100 ,  -10 ,  20 ,  20]
REAL_UPP=[500 , 70 ,  50   , 350 ,  30  ,  60 ,  100]
IMAG_LOW=[0   , 0  ,  0    , -50 ,  -20 , -30 ,  0]
IMAG_UPP=[0   , 80 ,  80   , 100 ,  30  , -10 ,  0]


# AMP_NAMES has to follow the same order as in the amplitudes cfg file.
# These defined ranges will be used to initialize the amplitudes for the full fit. Sampled uniformly.
# AMP_NAMES=["S0" , "P0", "P1", "D0", "D1", "D2"]
# REAL_LOW= [-200 , -30 ,  25 , 200 , -40, 50]
# REAL_UPP= [ 200 ,  40 ,  70 , 500 ,  20, 200]
# IMAG_LOW= [-110 , -70 , -30 , 0   , -30, -20]
# IMAG_UPP= [-50  , -10 ,  30 , 0   ,  30, 100]
# MOM_NAMES=["H0_00","H1_00","H0_10","H1_10","H0_11","H1_11","H0_20","H1_20","H0_21","H1_21","H0_22","H1_22","H0_30","H1_30","H0_31","H1_31","H0_32","H1_32","H0_33","H1_33","H0_40","H1_40","H0_41","H1_41","H0_42","H1_42","H0_43","H1_43","H0_44","H1_44"]

# VARIBLES FOR JUST THE BOOT FIT
NUMBER_SEEDS=2
RND_SAMP=False
# THE FOLLOWING TWO BINS WORK TOGETHER, THE FIRST SPECIFIES THAT WE ONLY WANT TO RERUN THE PWA ON A SINGLE BIN (IN CASE SOME OF THE BINS DONT RUN OVER ALL SEEDS). THE SECOND COMMAND ALLOWS US TO RUN MULTIPLE PROCESSES ON THIS SINGLE BIN.
# IF THE SELECTED BIN NUMBER IS WITHIN THE SET OF BIN NUMBERS THEN EXECUTION WILL ONLY OCCUR ON THIS SINGLE BIN
SINGLE_BIN=-1
USE_MULTIPLE_PROCS_PER_BIN=False
# easy way to keep all the old seed fits is to shift the names by setting SEED_SHIFT to shift the names
# since python is exclusive in the for loop we basically have to take the last seed fit value and add 1
SEED_SHIFT=0
STARTING_SEED=123121 # this must also be changed if we want to shift the seeds... otherwise the seeds would follow the same pattern and the shift actually biases results.
###########################################

# These options take in our converged ampltidues from the full dataset and creates a range for REAL and IMAG parts using a certain percent deviation and base deviation
# If the fit does not converge this will be repeated MAX_ITER number of times and will ramp up the BASE_DEVIATION when RAMP_DEVIATION_ITER number of iterations is reached.
PERCENT_DEVIATION=0.3
BASE_DEVIATION1=30
RAMP_DEVIATION_ITER=25
BASE_DEVIATION2=200

